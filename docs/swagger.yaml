definitions:
  models.AuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.AuthResponse:
    properties:
      is_pin_exist:
        type: boolean
      token:
        type: string
    type: object
  models.BadRequestResponse:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: Example bad request error...
        type: string
      is_success:
        example: false
        type: boolean
    type: object
  models.ChangePINRequest:
    properties:
      new_pin:
        minLength: 6
        type: string
      old_pin:
        minLength: 6
        type: string
    required:
    - new_pin
    - old_pin
    type: object
  models.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.ChartData:
    properties:
      expense_data:
        items:
          type: integer
        type: array
      income_data:
        items:
          type: integer
        type: array
      labels:
        items:
          type: string
        type: array
    type: object
  models.ChartDataResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/models.ChartData'
      is_success:
        example: true
        type: boolean
      message:
        example: Example message success...
        type: string
      page:
        example: 1
        type: integer
    type: object
  models.ConfirmPayment:
    properties:
      pin:
        type: string
    required:
    - pin
    type: object
  models.ErrorResponse:
    properties:
      code:
        example: 200
        type: integer
      error:
        example: Error message...
        type: string
      is_success:
        example: true
        type: boolean
      message:
        example: Example message success...
        type: string
      page:
        example: 1
        type: integer
    type: object
  models.ForgotPasswordOrPINRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.InternalErrorResponse:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: Example Internal server error...
        type: string
      is_success:
        example: false
        type: boolean
    type: object
  models.ListprofileResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.ProfileResponse'
        type: array
    type: object
  models.NotFoundResponse:
    properties:
      code:
        example: 404
        type: integer
      error:
        example: Not Found
        type: string
      is_success:
        example: false
        type: boolean
    type: object
  models.ProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      phone:
        type: string
      profile_picture:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ResetPINRequest:
    properties:
      new_pin:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_pin
    - token
    type: object
  models.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  models.Response:
    properties:
      code:
        example: 200
        type: integer
      is_success:
        example: true
        type: boolean
      message:
        example: Example message success...
        type: string
      page:
        example: 1
        type: integer
    type: object
  models.ResponseData:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      is_success:
        example: true
        type: boolean
      message:
        example: Example message success...
        type: string
      page:
        example: 1
        type: integer
    type: object
  models.SetPINRequest:
    properties:
      new_pin:
        minLength: 6
        type: string
    required:
    - new_pin
    type: object
  models.TopUpRequest:
    properties:
      amount:
        type: integer
      payment_id:
        type: integer
      tax:
        type: integer
    required:
    - amount
    - payment_id
    type: object
  models.TransferBody:
    properties:
      amount:
        type: integer
      notes:
        type: string
      pin_sender:
        minLength: 6
        type: string
      receiver_id:
        type: integer
      receiver_phone:
        type: string
    required:
    - amount
    - pin_sender
    - receiver_id
    - receiver_phone
    type: object
  models.UnauthorizedResponse:
    properties:
      code:
        example: 401
        type: integer
      error:
        example: 'Unauthorized : please login again...'
        type: string
      is_success:
        example: false
        type: boolean
    type: object
host: 127.0.0.1:3000/api/
info:
  contact: {}
  description: E-wallet team belalai
  title: Belalai E-Wallet
  version: "1.0"
paths:
  /auth:
    delete:
      description: Logout user by blacklist their token on redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Logout user by blacklist their token
      tags:
      - logout
    post:
      consumes:
      - application/json
      description: login using email and password and return as response with JWT
        token
      parameters:
      - description: Input email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      summary: Login registered user
      tags:
      - login
  /auth/change-password:
    patch:
      consumes:
      - application/json
      description: Change the current user password by providing old password and
        new password
      parameters:
      - description: Old and New Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Change current user password
      tags:
      - auth
  /auth/change-pin:
    patch:
      consumes:
      - application/json
      description: Change the current user PIN by providing old PIN and new PIN (min
        6 characters)
      parameters:
      - description: Old and New PIN
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ChangePINRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Change current user PIN
      tags:
      - auth
  /auth/confirm-pin:
    post:
      consumes:
      - application/json
      description: Verify user's PIN before processing a payment
      parameters:
      - description: PIN confirmation
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid PIN or unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Confirm user PIN
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a reset password link with token to the user's email
      parameters:
      - description: User email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordOrPINRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/forgot-pin:
    post:
      consumes:
      - application/json
      description: Send a reset PIN link with token to the user's email
      parameters:
      - description: User email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordOrPINRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      summary: Request PIN reset
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using the token received via email
      parameters:
      - description: Token and new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      summary: Reset user password
      tags:
      - auth
  /auth/reset-pin:
    post:
      consumes:
      - application/json
      description: Reset user PIN using the token received via email
      parameters:
      - description: Token and new_pin
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPINRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      summary: Reset user PIN
      tags:
      - auth
  /auth/update-pin:
    patch:
      consumes:
      - application/json
      description: Update the current user PIN directly without old PIN (min 6 characters)
      parameters:
      - description: New PIN
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SetPINRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Update current user PIN directly
      tags:
      - auth
  /balance:
    get:
      consumes:
      - application/json
      description: Get balance for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success Response with Balance Data
          schema:
            $ref: '#/definitions/models.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user balance
      tags:
      - balance
  /chart/{duration}:
    get:
      consumes:
      - application/json
      description: Mendapatkan data chart keuangan pengguna yang sudah diautentikasi
        (berdasarkan ID pengguna dari token JWT) dengan filter durasi tertentu.
      parameters:
      - description: 'Durasi filter data chart (contoh: ''seven_days'', ''five_weeks'',
          ''twelve_months'')'
        in: path
        name: duration
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data chart berhasil diambil
          schema:
            $ref: '#/definitions/models.ChartDataResponse'
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Kesalahan server internal
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Mendapatkan data chart berdasarkan durasi filter
      tags:
      - Chart
  /profile:
    get:
      consumes:
      - application/json
      description: Mengambil detail profil pengguna yang sedang login (berdasarkan
        ID dari token JWT).
      produces:
      - application/json
      responses:
        "200":
          description: Detail profil berhasil diambil
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseData'
            - properties:
                Data:
                  $ref: '#/definitions/models.ProfileResponse'
              type: object
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: Profil pengguna tidak ditemukan
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
      security:
      - JWTtoken: []
      summary: Mendapatkan detail profil pengguna
      tags:
      - Profile
    patch:
      consumes:
      - multipart/form-data
      description: Memperbarui nama lengkap, nomor telepon, email, dan/atau gambar
        profil pengguna yang sedang login.
      parameters:
      - description: Nama lengkap pengguna
        in: formData
        name: fullname
        required: true
        type: string
      - description: Nomor telepon pengguna
        in: formData
        name: phone
        required: true
        type: string
      - description: Alamat email pengguna (opsional)
        in: formData
        name: email
        type: string
      - description: Gambar profil baru (format file)
        in: formData
        name: profile_picture
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profil berhasil diperbarui
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 'Permintaan tidak valid (contoh: data form binding gagal, kesalahan
            upload file)'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Kesalahan server internal
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Memperbarui detail profil pengguna
      tags:
      - Profile
  /profile/avatar:
    delete:
      consumes:
      - application/json
      description: Menghapus gambar profil (avatar) pengguna yang sedang login.
      produces:
      - application/json
      responses:
        "200":
          description: Gambar profil berhasil dihapus
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Kesalahan server internal saat menghapus avatar
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Menghapus gambar profil
      tags:
      - Profile
  /topup:
    post:
      consumes:
      - application/json
      description: Create a new topup transaction with selected payment method
      parameters:
      - description: Topup request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.TopUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - JWTtoken: []
      summary: Create topup transaction
      tags:
      - TopUp
  /topup/methods:
    get:
      consumes:
      - application/json
      description: Retrieve list of supported payment methods for topup
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - JWTtoken: []
      summary: Get available payment methods
      tags:
      - TopUp
  /transaction/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete transaction for authenticated user
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success Response
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: Transaction Not Found
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Soft delete transaction
      tags:
      - transaction
  /transaction/history:
    get:
      consumes:
      - application/json
      description: Get transaction history for authenticated user (excluding soft
        deleted) with pagination support
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success Response with Transaction History Data
          schema:
            $ref: '#/definitions/models.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: Transaction History Not Found
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user transaction history with pagination
      tags:
      - transaction
  /transaction/history/all:
    get:
      consumes:
      - application/json
      description: Get complete transaction history including transfers and topups
        for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success Response with Complete Transaction History Data
          schema:
            $ref: '#/definitions/models.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: Transaction History Not Found
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all user transaction history (transfer + topup)
      tags:
      - transaction
  /transaction/topup/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete topup for authenticated user
      parameters:
      - description: Topup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success Response
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: Topup Not Found
          schema:
            $ref: '#/definitions/models.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Soft delete topup
      tags:
      - topup
  /transfer:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar pengguna dengan opsi pencarian dan paginasi.
        Digunakan untuk memilih pengguna tujuan transfer.
      parameters:
      - description: Kata kunci pencarian nama atau nomor telepon
        in: query
        name: search
        type: string
      - description: 'Nomor halaman untuk paginasi (default: 1)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Daftar pengguna berhasil diambil
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseData'
            - properties:
                Data:
                  $ref: '#/definitions/models.ListprofileResponse'
              type: object
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Kesalahan server internal
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Memfilter daftar pengguna
      tags:
      - Transfer
    post:
      consumes:
      - application/json
      description: Melakukan proses transfer saldo dari pengguna yang terautentikasi
        ke pengguna tujuan, memerlukan verifikasi PIN.
      parameters:
      - description: Detail transfer (ID penerima, jumlah, dan PIN pengirim)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.TransferBody'
      produces:
      - application/json
      responses:
        "200":
          description: Transfer berhasil
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 'Permintaan tidak valid (contoh: data binding gagal, PIN salah,
            saldo tidak cukup, transfer ke diri sendiri)'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi (Unauthorized) - Token JWT tidak valid
            atau hilang
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Kesalahan server internal
          schema:
            $ref: '#/definitions/models.InternalErrorResponse'
      security:
      - JWTtoken: []
      summary: Melakukan transfer saldo
      tags:
      - Transfer
securityDefinitions:
  JWTtoken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
